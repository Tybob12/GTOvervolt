plugins {
    alias libs.plugins.architectury
    alias libs.plugins.architectury.loom
    alias libs.plugins.vineFlower apply false // VineFlower, a better decompiler
    alias libs.plugins.machete // automatic jar compressing on build
    alias libs.plugins.shadow
}

apply plugin: "dev.architectury.loom"
//apply plugin: "io.github.juuxel.loom-vineflower"
apply plugin: "java"
apply plugin: "architectury-plugin"
apply plugin: "maven-publish"


archivesBaseName = "${project.name}-${libs.versions.minecraft.get()}"
group = properties.maven_group

// Formats the mod version to include the loader, Minecraft version, and build number (if present)
String buildNumber = System.getenv("GITHUB_ACTION_NUMBER")
version = "${mod_version}" + (buildNumber != null ? "-build_${System.getenv("GITHUB_RUN_NUMBER")}" : "")


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set 17
}

java {
    withSourcesJar()
}

architectury {
    platformSetupLoomIde()
    forge()
    minecraft = libs.versions.minecraft
}

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
    silentMojangMappingsLicense()

    forge {
        mixinConfig(
                "${mod_id}.mixins.json",
        )

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen{
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + file("src/main/resources").absolutePath)
        programArgs("--client", "--server")
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
    runs {
        create("gameTestServer") {
            server()
            name("Minecraft Game Test")
            source("main")

            property("forge.enabledGameTestNamespaces", mod_id)
            property("forge.gameTestServer", "true")

            mods {
                create(mod_id) {
                    sourceSet("main")
                }
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    mavenLocal()
    mavenCentral()


    // GregTechCEu
    maven {
        name = 'GTCEu Maven'
        url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }

    // JitPack - used for GitHub-hosted libraries like MixinExtras
    maven {

        url = 'https://jitpack.io'
    }


    // Curse Maven - required for mods published via CurseForge
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // ModMaven - general mod mirror, also fallback for JEI
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // Jared's Maven - used for JEI and other mods by Jared
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    // LDLib and Configuration
    maven {url = "https://maven.firstdarkdev.xyz/snapshots"}

    // Parchment mappings
    maven {url = "https://maven.parchmentmc.org"}

    // Quilt Mappings
    maven {url = "https://maven.quiltmc.org/repository/release"}

    // SpongePowered Maven - Mixin and related tools
    maven {

        name = "mixin"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }

    // Team Resourceful Maven - EMI
    maven {

        url = "https://maven.teamresourceful.com/repository/maven-public/"
    }

    // Curios and mods by theillusivec4
    maven {url = "https://maven.theillusivec4.top/"}

    // Registrate
    maven {
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }

    // KubeJS, Rhino, and other mods by saps.dev
    maven {
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    // Jade - in-game info mod
    maven {url = "https://api.modrinth.com/maven"}

    // Create mod's official Maven
    maven {url = "https://maven.createmod.net"}

}

dependencies {
    minecraft libs.minecraft
    forge forge.minecraftForge

    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${libs.versions.minecraft.get()}+build.${libs.versions.quiltMappings.get()}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${libs.versions.minecraft.get()}:${libs.versions.parchment.get()}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }

    // LDLib
    modImplementation(forge.gtceu.forge) { transitive = false }
    modImplementation(forge.ldlib.forge) { transitive = false }

    // Registrate
    modImplementation("com.tterrag.registrate:Registrate:${forge.versions.registrate.get()}")

    //EMI
    modImplementation(forge.emi) { transitive = false }

    // Configuration
    modImplementation(forge.configuration)

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${forge.versions.mixinExtras.get()}"))
    api("io.github.llamalad7:mixinextras-forge:${forge.versions.mixinExtras.get()}")
    // apply a newer mixin AP to fix an issue with building the Lithium mixins
    implementation(annotationProcessor("org.spongepowered:mixin:${libs.versions.mixin.get()}:processor"))

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // AE2
    modImplementation(forge.guideme) { transitive = false }
    modImplementation(forge.ae2) { transitive = false }
}

processResources {
    // set up properties for filling into metadata
    var properties = [
            "mod_license": mod_license,
            "mod_id": mod_id,
            "version": version,
            "mod_name": mod_name,
            "mod_url": mod_url,
            "mod_author": mod_author,
            "forge_version": forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version": minecraft_version,
            "gtceu_version": forge.versions.gtceu
    ]
    inputs.properties(properties)

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release.set(17)
}

remapJar {
    inputFile.set jar.archiveFile
    dependsOn(":optimizeOutputsOfJar")
    archiveClassifier.set(null)
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
